`memset`
- #include <string.h>
- fill memory with a constant byte
- void *memset(void *s, int c, size_t n);
- The memset() function fills the first n bytes of the memory area pointed to by s with the constant byte c.

`printf`
`malloc`
`free`
`write`

`usleep`
- #include <unistd.h>
- suspend execution for microsecond intervals
- int usleep(useconds_t usec);
- 1 microsecond = 0.001 millisecond
- The usleep() function suspends execution of the calling thread for (at least) usec microseconds.

`gettimeofday`
- #include <sys/time.h>
- get time in seconds and microseconds
- int gettimeofday(struct timeval *tv, struct timezone *tz);

`pthread_create`
- create a new thread
- #include <pthread.h>
- int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);
- Compile and link with -pthread.
- The pthread_create() function starts a new thread in the calling process.

`pthread_detach`
- detach a thread
- #include <pthread.h>
- int pthread_detach(pthread_t thread);
- The pthread_detach() function marks the thread identified by thread as detached. When a detached thread terminates, its resources are automatically released back to the system without the need for another thread to join with the terminated thread.

`pthread_join`
- join with a terminated thread
- #include <pthread.h>
- int pthread_join(pthread_t thread, void **retval);
- The pthread_join() function waits for the thread specified by thread to terminate. If that thread has already terminated, then pthread_join() returns immediately. The thread specified by thread must be joinable.

`pthread_mutex_init`
-  initialize a mutex
- #include <pthread.h>
- pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
- int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);
- Only mutex itself may be used for performing synchronization. Attempting to initialize an already initialized mutex results in undefined behavior. In cases where default mutex attributes are appropriate, the macro PTHREAD_MUTEX_INITIALIZER can be used to initialize mutexes that are statically allocated. The effect shall be equivalent to dynamic initialization by a call to pthread_mutex_init() with parameter attr specified as NULL, except that no error checks are performed.

`pthread_mutex_destroy`
- destroy a mutex
- #include <pthread.h>
- int pthread_mutex_destroy(pthread_mutex_t *mutex);
- The pthread_mutex_destroy() function shall destroy the mutex object referenced by mutex; the mutex object becomes, in effect, uninitialized. It shall be safe to destroy an initialized mutex that is unlocked. Attempting to destroy a locked mutex results in undefined behavior.

`pthread_mutex_lock`
- lock a mutex
- int pthread_mutex_lock(pthread_mutex_t *mutex);
- The mutex object referenced by mutex shall be locked by calling pthread_mutex_lock(). If the mutex is already locked, the calling thread shall block until the mutex becomes available. This operation shall return with the mutex object referenced by mutex in the locked state with the calling thread as its owner.
- make sure to check for deadlock situation

`pthread_mutex_unlock`
- unlock a mutex
- int pthread_mutex_unlock(pthread_mutex_t *mutex);
- The pthread_mutex_unlock() function shall release the mutex object referenced by mutex. The manner in which a mutex is released is dependent upon the mutex's type attribute. If there are threads blocked on the mutex object referenced by mutex when pthread_mutex_unlock() is called, resulting in the mutex becoming available, the scheduling policy shall determine which thread shall acquire the mutex.
- If a signal is delivered to a thread waiting for a mutex, upon return from the signal handler the thread shall resume waiting for the mutex as if it was not interrupted.

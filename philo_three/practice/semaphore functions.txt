[sem_open - initialize and open a named semaphore]

- #include <fcntl.h>          /* For O_* constants */
- #include <sys/stat.h>        /* For mode constants */
- #include <semaphore.h>

- sem_t *sem_open(const char *name, int oflag);
  sem_t *sem_open(const char *name, int oflag,
                  mode_t mode, unsigned int value);

- sem_open() creates a new POSIX semaphore or opens an existing semaphore. The semaphore is identified by name.

- The oflag argument specifies flags that control the operation of the call. If [O_CREAT] is specified in [oflag], then the semaphore is created if it does not already exist. If O_CREAT is specified in oflag, then two additional arguments must be supplied. The mode  argument  specifies the  permissions to be placed on the new semaphore.

- The [value] argument specifies the initial value for the new semaphore. If O_CREAT is specified, and a semaphore with the given name already exists, then mode and value are ignored.

- Return value:
  - On  success,  sem_open() returns the address of the new semaphore; this address is used when calling other semaphore-related functions.
  - On error, sem_open() returns [SEM_FAILED], with errno set to indicate the error.

[sem_close - close a named semaphore]

- int sem_close(sem_t *sem);
- sem_close() closes the named semaphore referred to by sem, allowing any resources that the system has allocated to the calling process for this semaphore to be freed.
- On success sem_close() returns 0; on error, -1 is returned, with errno set to indicate the error.

[ sem_wait - lock a semaphore]

- int sem_wait(sem_t *sem);

- sem_wait() decrements (locks) the semaphore pointed to by sem. If the semaphore's value is greater than zero, then the decrement proceeds, and the function returns, immediately.

- If the semaphore currently has the value zero, then the call blocks until either it becomes possible to perform the decrement (i.e., the semaphore value rises above zero), or a signal handler interrupts the call.

- All of these functions return 0 on success; on error, the value of the semaphore is left unchanged,  -1 is returned, and errno is set to indicate the error.

[sem_post - unlock a semophore]

- int sem_post(sem_t *sem);

- sem_post() increments (unlocks) the semaphore pointed to by sem. If the semaphore's value [consequently becomes greater than zero], then another process or thread blocked in a sem_wait(3) call will be woken up and proceed to lock the semaphore.

- sem_post() returns 0 on success; on error, the value of the semaphore is left unchanged, -1 is returned, and errno is set to indicate the error.

[sem_unlink - remove a named semaphore]

- int sem_unlink(const char *name);

- sem_unlink() removes the named semaphore referred to by name. The semaphore name is removed immediately. The semaphore is destroyed once all other processes that have the semaphore open close it.

-  On success sem_unlink() returns 0; on error, -1 is returned, with errno set to indicate the error.
